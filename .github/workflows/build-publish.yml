name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  workflow_dispatch:
    inputs:
      toolchain:
        type: string
        description: 'Toolchain identifier'
        default: 'arm-zephyr-eabi'
      sdk-version:
        type: string
        description: 'Zephyr SDK version'
        default: '0.16.8'
      west-manifest:
        type: string
        description: 'Path to the West manifest file'
        default: '.manifests/west-stm32.yml'

#  push:
#    branches: ['master']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    strategy:
        matrix:
          target: ['stm32']

    runs-on: ubuntu-latest
    # Sets `GITHUB_TOKEN`  permissions for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container 
      # registry registry using the account and password that will publish the 
      # packages. Once published, the packages are scoped to the account 
      # defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) 
      # to extract tags and labels that will be applied to the specified image. 
      # The `id` "meta" allows the output of this step to be referenced in a subsequent step. 
      # The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          file: .devcontainer/Dockerfile
          context: .
          push: true
          #push: ${{ github.event_name == 'workspace_dispatch' }}
          #tags: ${{ steps.meta.outputs.tags }}
          #labels: ${{ steps.meta.outputs.labels }}
          #tags: type=ref
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.target }}:latest
      
      # This step generates an artifact attestation for the image, which is an 
      # unforgeable statement about where and how it was built. It increases 
      # supply chain security for people who consume the image.  
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
